{"version":3,"sources":["serviceWorker.js","components/nav.jsx","components/poll.jsx","components/create_poll.jsx","components/results.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Nav","react_default","a","createElement","className","Link","to","id","lib","header","trigger","style","listStyle","marginLeft","React","Component","Poll","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","isChecked","target","name","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","payload","updateFetch","received","_this$state","questions","wrap","_context","prev","next","preventDefault","state","error","abrupt","_id","params","question","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","status","console","log","isComplete","submitted","ws","send","history","push","concat","Id","t0","stop","_x","apply","arguments","renderQuestions","values","filter","item","map","_ref2","index","key","uuid","type","checked","onChange","label","WebSocket","document","host","close","pollFetch","pollData","nav_Nav","title","onSubmit","CreatePost","handleCB","token","postToken","success","captcha","defineProperty","value","renderInput","keys","startsWith","i","number","placeholder","autoComplete","_callee2","quest0","quest1","sort","postFetch","fetchRes","_context2","length","_ref3","reduce","obj","_Object$keys","_Object$keys2","slicedToArray","first","second","quest2","quest3","quest4","_x2","copied","_this2","_loop","x","path","objectSpread","prevProps","prevState","ch","react_copy_to_clipboard_lib","text","dist","sitekey","action","verifyCallback","Results","renderResults","filtered","count","total","data","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","options","scales","xAxes","ticks","beginAtZero","suggestedMin","suggestedMax","es","socketData","addEventListener","msg","parse","quest","newState","update","$set","ReactDOM","render","BrowserRouter","Switch","Route","exact","component","CreatePoll","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cba58707.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Modal, Button } from 'react-materialize'\r\nexport default class Nav extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar-fixed\">\r\n      <nav className=\"fixer\">\r\n        <div className=\"nav-flex\">\r\n        <Link to=\"/\" className=\"brand-logo left\">Fetcher's Poll</Link>\r\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n          <li className=\"dropper\">\r\n          <Modal\r\n  header=\"Welcome to Marc Dwyer's poll app!\"\r\n  trigger={<Button className=\"dropper-btn\">Features</Button>}>\r\n    <ul>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Web Sockets update you in real time</li>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Polls saved to Mongodb for persisted data</li>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Ip duplication check and Google's recaptcha v3</li>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Making a poll is so easy you dont even notice how good it is</li>\r\n      \r\n    </ul>\r\n</Modal>\r\n          </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n      )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport uuid from 'uuid'\r\nimport Nav from './nav'\r\nimport { Input } from 'react-materialize'\r\nexport default class Poll extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isChecked: `quest0`,\r\n            isComplete: false,\r\n            submitted: null,\r\n            questions: null,\r\n            ws: new WebSocket(`wss://${document.location.host}/sockets/${this.props.match.params.id}`),\r\n            error: null\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.state.ws.close()\r\n    }\r\n    async componentDidMount() {\r\n        const pollFetch = await fetch('/api/getpoll', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(this.props.match.params.id)\r\n            })\r\n         const pollData = await pollFetch.json()\r\n            this.setState({questions: pollData})\r\n    }\r\n    render() {\r\n        if (!this.state.questions) {\r\n            return (\r\n                <div>\r\n                    <Nav />\r\n                    <div className=\"contained\">\r\n                    <div className=\"preloader-wrapper big active\">\r\n      <div className=\"spinner-layer spinner-blue-only\">\r\n      <div className=\"circle-clipper left\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"gap-patch\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"circle-clipper right\">\r\n        <div className=\"circle\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n                </div>\r\n                </div>\r\n            )\r\n        } \r\n        const error = this.state.error ? this.state.error :'';\r\n        return (\r\n            <div>\r\n                <Nav />\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>{this.state.questions.title} <br /><small>{error}</small></h4>\r\n            <div className=\"actualpoll\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <ul> \r\n                {this.renderQuestions()}\r\n            </ul>\r\n            <div className=\"resp-buttons\">\r\n            <button \r\n            type=\"submit\" className=\"waves-effect waves-light btn pollbtn\">Submit Answer!</button>\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    handleChange = (e) => {\r\n            this.setState({isChecked: e.target.name})\r\n    }\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if (this.state.error) return\r\n        const payload = {\r\n            _id: this.props.match.params.id,\r\n            question: this.state.isChecked\r\n        }\r\n        try {\r\n        const updateFetch = await fetch('/api/update', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(payload)\r\n        })\r\n        const received = await updateFetch.json()\r\n        if (received.status) {\r\n            console.log(received)\r\n            this.setState({error: \"Duplicate ip detected\"})\r\n            return\r\n        } else {\r\n            console.log(received)\r\n            const { isChecked, questions } = this.state\r\n            this.setState({isComplete: true, submitted: questions[isChecked]}, () => {\r\n                this.state.ws.send(JSON.stringify(payload))\r\n                this.props.history.push(`/poll/results/${this.state.questions.Id}`)\r\n            })\r\n        }\r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n\r\n    }\r\n    renderQuestions = () => {\r\n        const { questions } = this.state\r\n        const filtered = Object.values(questions).filter(item => item.question);\r\n\r\n        return filtered.map(({ question }, index) => {\r\n            if (!question) return null\r\n            return (\r\n            <div key={uuid()} className=\"pollquest\">\r\n                <Input name={`quest${index}`} type=\"radio\" checked={this.state.isChecked === `quest${index}`}  onChange={this.handleChange} label={question} />\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { ReCaptcha } from 'react-recaptcha-v3'\r\nimport Nav from './nav'\r\nexport default class CreatePost extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            error: null,\r\n            number: 2,\r\n            id: null,\r\n            title: '',\r\n            isComplete: false,\r\n            copied: false,\r\n            captcha: false\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        for (let x = 0; x < 5; x++) {\r\n            const path = `quest${x}`\r\n            this.setState((state) => {\r\n                return {...state, [path]: ''}\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //checks to see if all inputs have a value... it they do, another input tag is displayed\r\n        const { number } = this.state;\r\n        const path = `quest${number - 1}`\r\n        if (!this.state[path] || this.state[path].length === 0) return;\r\n        let ch = 0\r\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n        const { state } = this\r\n        for (let x = 0; x < state.number; x++) {\r\n            \r\n            if (state[sort[x]] && state[sort[x]].length > 0) {\r\n                ch++\r\n                continue\r\n            } \r\n        }\r\n         if (ch === this.state.number) {\r\n            this.setState({number: this.state.number + 1})\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.isComplete) {\r\n            return (\r\n                <div>\r\n                <Nav />\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>Poll Submitted</h4>\r\n            <i className=\"fa fa-check\" />\r\n            <div className=\"resp-buttons\">\r\n            <Link to={`/poll/survey/${this.state.id}`} className=\"waves-effect waves-light btn pollbtn\">View Poll</Link>\r\n            <CopyToClipboard \r\n            text={`https://${window.location.host}/poll/survey/${this.state.id}`} >\r\n          <button className=\"waves-effect waves-light btn purple accent-1 copy\">Click to copy post url</button>\r\n        </CopyToClipboard>\r\n            </div>\r\n            </div>\r\n\r\n            </div>\r\n            </div>\r\n            ) \r\n        }\r\n        return (\r\n            <div>\r\n            <Nav />\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>{this.state.error ? this.state.error : 'Create a poll'}</h4>\r\n            <div className=\"actualpoll\">\r\n            <div className=\"check\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n                 <input name=\"title\" value={this.state.title} type=\"text\" onChange={this.handleChange} autoComplete=\"off\" className={this.state.error ? \"redder\": \"\"} />\r\n                  <label className=\"active\">Enter a title</label>\r\n                    </div>\r\n                    </div>\r\n            <ul className=\"marginthis\">\r\n            {this.renderInput()}\r\n            </ul>\r\n            <div className=\"resp-buttons\">\r\n            <ReCaptcha \r\n            sitekey='6LeMcYUUAAAAALOdfvlBa3Fv6rwnM7G6Id_ks2Ao'\r\n            action='action_name'\r\n            verifyCallback={this.handleCB}\r\n            />\r\n            <button className=\"waves-effect waves-light btn pollbtn submit\">Submit poll</button>\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    handleCB = async (token) => {\r\n        try {\r\n            const postToken = await fetch ('auth', {\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  method: 'POST',\r\n                  body: JSON.stringify(token)\r\n    \r\n            })\r\n            const res = await postToken.json()\r\n            if (res.success) {\r\n                this.setState({captcha: true})\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n\r\n    }\r\n    renderInput = () => {\r\n    const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n       return sort.map((item, i) => {\r\n            if (i < this.state.number) {\r\n                return (\r\n                    <div key={i} className=\"row\">\r\n                    <div className=\"input-field col s10\">\r\n                 <input value={this.state[item]} className={this.state.error ? \"redder\" : \"\"} type=\"text\"  name={item} onChange={this.handleChange} placeholder={this.state.error || `Questions #${i + 1}`} autoComplete=\"off\"  />\r\n                    </div>\r\n                </div>\r\n                )\r\n            }\r\n            return null\r\n        })\r\n    }\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const { quest0, quest1, title, captcha } = this.state\r\n        if (quest0.length === 0 || quest1.length === 0 || title.length === 0) {\r\n            this.setState({error: \"Please enter questions\"})\r\n            return\r\n        } else if (!captcha) {\r\n            this.setState({error: \"Captcha Auth Failed\"})\r\n            return\r\n        }\r\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n\r\n       const submitted = sort.filter((item) => {\r\n            if (this.state[item].length > 0) {\r\n                return this.state[item]\r\n            } \r\n            return null\r\n        }).map(item => {\r\n           return {[item]: this.state[item], count: 0}\r\n        }).reduce((obj, item, i) => {\r\n            const [first, second] = Object.keys(item)\r\n            obj[first] = {question: item[first], [second]: 0}\r\n            obj.title = this.state.title\r\n           return obj\r\n        }, {})\r\n        try {\r\n            const postFetch = await fetch('/api/create', {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify(submitted)\r\n            })\r\n            const fetchRes = await postFetch.json()\r\n            this.setState({id: fetchRes, isComplete: true, quest0: '', quest1: '', quest2: '', quest3: '', quest4: ''})\r\n            } catch(err) {\r\n                console.log(err)\r\n            }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Nav from './nav'\r\nimport { Link } from 'react-router-dom'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { Dropdown, Button, NavItem } from 'react-materialize'\r\nimport update from 'immutability-helper';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nexport default class Results extends Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.state = {\r\n                questions: null,\r\n                ws: new WebSocket(`wss://${document.location.host}/sockets/${this.props.match.params.id}`),\r\n                socketData: null,\r\n                copied: false\r\n            }\r\n        }\r\n        componentWillUnmount() {\r\n            this.state.ws.close()\r\n        }\r\n        async componentDidMount() {\r\n            this.state.ws.addEventListener(\"message\", (msg) => {\r\n                this.setState({socketData: JSON.parse(msg.data)})\r\n            })\r\n            const pollFetch = await fetch('/api/getpoll', {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  body: JSON.stringify(this.props.match.params.id)\r\n            })\r\n            const pollData = await pollFetch.json()\r\n            this.setState({questions: pollData})\r\n        }\r\n        componentDidUpdate(prevProps, prevState) {\r\n            const { socketData, questions } = this.state\r\n            if (socketData && socketData._id === this.props.match.params.id) {\r\n                if (prevState.socketData !== this.state.socketData) {\r\n                    const quest = socketData.question\r\n                    const obj = questions[socketData.question]\r\n                    obj.count = obj.count + 1\r\n                    const newState = update(this.state, {\r\n                        questions: {[quest]: {$set: {...obj }}}\r\n                    })\r\n                    this.setState(newState)\r\n            }\r\n        }\r\n    }\r\n        render() {\r\n\r\n                return (\r\n                    <div>\r\n                    <Nav />\r\n                    <div className=\"contained\">\r\n                    <div className=\"poll result\">\r\n                    <h4>The results are in!</h4>\r\n                    <div className=\"actualpoll\">\r\n                    <div className=\"check\">\r\n                    <ul> \r\n                    {this.renderResults()}\r\n                    </ul>\r\n                    </div>\r\n                    <div className=\"resp-buttons\">\r\n                    <Link to=\"/\" className=\"waves-effect waves-light btn pollbtn\">Create new poll</Link>\r\n                    <div className=\"share\">\r\n                    <Dropdown trigger={\r\n                          <Button className=\"btn purple accent-1 pollbtn\">Share</Button>\r\n                      }>\r\n                    <CopyToClipboard\r\n                           text={`https://${document.location.host}/poll/survey/${this.props.match.params.id}`} >\r\n                           <NavItem>Copy url</NavItem>\r\n                         </CopyToClipboard>\r\n                        </Dropdown>\r\n                        </div>\r\n                         </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                )\r\n\r\n        }\r\n        renderResults = () => {\r\n            const { questions } = this.state\r\n            if (!questions) {\r\n                return (\r\n                    <li className=\"thevotes\">\r\n                    <span>Loading results...</span>\r\n                </li>\r\n                )\r\n            }\r\n\r\n            const filtered = Object.values(questions).filter(item => item.question);\r\n            const question = filtered.map(item => `${item.question}`)\r\n            const count = filtered.map(item => item.count)\r\n            const total = filtered.reduce((total, item) => {\r\n                return total += item.count\r\n            }, 0)\r\n            const data = {\r\n                labels: question,\r\n                datasets: [\r\n                  {\r\n                    label: questions.title,\r\n                    backgroundColor: 'rgba(153,210,227,0.4)',\r\n                    borderColor: 'rgba(122,168,181,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(153,210,227,.85)',\r\n                    hoverBorderColor: 'rgba(122,168,181,1)',\r\n                    data: count\r\n                  }\r\n                ]\r\n              };\r\n              const options = {\r\n                    scales: {\r\n                        xAxes: [{\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                suggestedMin: 0,\r\n                                suggestedMax: total\r\n                            }\r\n                        }]\r\n                    }\r\n                }\r\n            return (\r\n                <HorizontalBar data={data} options={options} />\r\n            )\r\n            \r\n        }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport Poll from './components/poll'\r\nimport CreatePoll from './components/create_poll'\r\nimport Results from './components/results'\r\n \r\n// const DOMNode = document.getElementById('renderTarget');\r\nReactDOM.render(\r\n<BrowserRouter>\r\n<Switch>\r\n    <Route exact path=\"/poll/survey/:id\" component={Poll} />\r\n    <Route exact path=\"/poll/results/:id\" component={Results} />\r\n    <Route path=\"/\" component={CreatePoll} />\r\n</Switch>\r\n</BrowserRouter>\r\n,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}